<%# ERB is a templating system that evaluates Ruby code embedded in a document %>

<h1 class="">Hello! Welcome to Shenandoah's journal website.</h1>
<br><br><br>

<h2 class="font-likeguard medium">Recent activity: <span class="font-mono"> <%= Article.public_count %></span> posts</h2>
<br>


<%#list of all the articles%>
<ul class="pl-4">
    <%# this tag means evaluate the enclosed Ruby code (anything you could write in reg Ruby program) %>
  <% @articles.each do |article| %> <%#equal to 'for article in articles'%>
    
    <li>
      <%# this tag w/the equals sign means eval the enclosed ruby code and output the val it returns%>

      <% if false %>

      <%#This is one option%>
      <a href="/articles/<%= article.id %>">
        <%#output val returned by article.title for each article%>
        <%= article.title %>
      </a>
      
      <%# this is a second option, using _ helpers created by the resources method in routes%>
      <a href="<%= article_path(article) %>">
        <%#output val returned by article.title for each article%>
        <%= article.title %>
      </a>

      <% end %>

      <%#don't show archived articles%>
      <% unless article.archived? %>
        <%#this is best option. link_to helper renders a link with its first arg as link's txt, second arg as link's destination. 
        If we pass a model obj as second arg, link_to will call the appropriate path helper to convert object to a path.
        Like if we pass article, link_to will call article_path%>
        <div class="font-mono article-link">
          "<%= link_to article.title, article %>"
        </div>
      <% end %>
      
    </li>
  <% end %>
</ul>


<br>
<br>
<br>
<%#link to create new article page%>
<div class="">
  <button class="bg-red-300 border-double border-black border-4 p-2 new-art-button">
    <%= link_to "New Post", new_article_path %>
  </button>
</div>

