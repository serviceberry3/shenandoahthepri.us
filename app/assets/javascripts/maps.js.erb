 //div containing the leaflet div
 var map_div = document.getElementById('map_holder');
map_div.style.visibility = 'hidden';

//create leaflet map
var mymap = L.map('mapid');
   
//add MapBox streets tile layer
L.tileLayer(
    //url template for the tile images
    'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
        //attribution text
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        maxZoom: 18,
        id: 'mapbox/streets-v11',
        tileSize: 512,

        //offset zoom
        zoomOffset: -1,
        accessToken: 'pk.eyJ1Ijoic2VydmljZWJlcnJ5IiwiYSI6ImNrbDFyOWl4NzA1dmwydnRoMzF3M2Q4M3oifQ.ORicV2xW7BG_FqwaCGqU5Q'
}
).addTo(mymap);

/*


//bind attaches a popup with the specified HTML content to your marker so popup appears when you click on object
marker.bindPopup("<b>Hello world!</b><br>I am a popup.").openPopup();*/
//circle.bindPopup("I am a circle.");
//polygon.bindPopup("I am a polygon.");

function map_cities() {
  var cities_json = JSON.parse(document.getElementsByName("cities")[0].getAttribute("content"));

  for (city in cities_json) {
      if (cities_json[city].name != null && cities_json[city].visit_date != null) {
        var marker = L.marker([cities_json[city].lat, cities_json[city].long]).addTo(mymap);
        var icon = marker.options.icon;
        icon.options.iconSize = [16, 24];
        icon.options.iconAnchor = [8, 24];
        marker.setIcon(icon);


        marker.bindPopup("<b>" + cities_json[city].name + "</b><br>" + cities_json[city].review + "<br><b>Overall review: </b>" +
        cities_json[city].rating + "/10").openPopup();     
      } 
  }
}

function map_journals() {
  if (cities_json[city].name != null && cities_json[city].visit_date != null) {
          var marker = L.marker([cities_json[city].lat, cities_json[city].long]).addTo(mymap);
          var icon = marker.options.icon;
          icon.options.iconSize = [16, 24];
          icon.options.iconAnchor = [8, 24];
          marker.setIcon(icon);


          marker.bindPopup("<b>" + cities_json[city].name + "</b><br>" + cities_json[city].review + "<br><b>Overall review: </b>" +
          cities_json[city].rating + "/10").openPopup();     
        } 
}

async function map_gpx_files() {
  //await AJAX asset path requests
  var assets = await fill_ass_paths();

  console.log("running for loop...");
  for (var key in assets.gpx) {
      var gpx = assets.gpx[key]; // URL to your GPX file or the GPX itself
      //console.log("Key is " + key + ", gpx is " + gpx);
      new L.GPX(gpx, {async: true,
          marker_options: {
              startIconUrl: '<%= asset_path('pin-icon-start.png') %>',
              endIconUrl: '<%= asset_path('pin-icon-end.png') %>',
              shadowUrl: '<%= asset_path('pin-shadow.png') %>',
              wptIconUrls : {
                '': '<%= asset_path('pin-icon-wpt.png') %>',
              },
              wptIconUrl: '<%= asset_path('pin-icon-wpt.png') %>',
              iconSize: [8, 12],
              shadowSize: [8, 12],
              iconAnchor: [4, 12],
              shadowAnchor: [2, 12]
        }
      }).on('loaded', function(e) {
        mymap.fitBounds(e.target.getBounds());
      }).addTo(mymap);
  }

  //now let's add the cities
  map_cities();

  //add journals
  map_journals();
}

//to be executed last, after all map drawing is complete
function finish() {
  mymap.setView([38.134557, -80.441406], 1);
  console.log("All done");
  map_div.style.visibility = 'visible';

  //remove the loading gif
  $('#loading').remove();
}

//draw all of the gpx files (async function which waits for asset path Promises to all be filled), 
//then execute some finishing code
map_gpx_files().then(finish);




